# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_AutoInfer_cpp2python_Ubuntu16_04_7', [dirname(__file__)])
        except ImportError:
            import _AutoInfer_cpp2python_Ubuntu16_04_7
            return _AutoInfer_cpp2python_Ubuntu16_04_7
        if fp is not None:
            try:
                _mod = imp.load_module('_AutoInfer_cpp2python_Ubuntu16_04_7', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _AutoInfer_cpp2python_Ubuntu16_04_7 = swig_import_helper()
    del swig_import_helper
else:
    import _AutoInfer_cpp2python_Ubuntu16_04_7
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AutoInfer_cpp2python_Ubuntu16_04_7.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.SwigPyIterator_equal(self, x)

    def copy(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.SwigPyIterator_copy(self)

    def next(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.SwigPyIterator_next(self)

    def __next__(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.SwigPyIterator___next__(self)

    def previous(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.SwigPyIterator_previous(self)

    def advance(self, n):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _AutoInfer_cpp2python_Ubuntu16_04_7.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.IntVector___nonzero__(self)

    def __bool__(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.IntVector___bool__(self)

    def __len__(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.IntVector___setitem__(self, *args)

    def pop(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.IntVector_pop(self)

    def append(self, x):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.IntVector_append(self, x)

    def empty(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.IntVector_empty(self)

    def size(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.IntVector_size(self)

    def swap(self, v):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.IntVector_swap(self, v)

    def begin(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.IntVector_begin(self)

    def end(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.IntVector_end(self)

    def rbegin(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.IntVector_rbegin(self)

    def rend(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.IntVector_rend(self)

    def clear(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.IntVector_clear(self)

    def get_allocator(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.IntVector_get_allocator(self)

    def pop_back(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.IntVector_pop_back(self)

    def erase(self, *args):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _AutoInfer_cpp2python_Ubuntu16_04_7.new_IntVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.IntVector_push_back(self, x)

    def front(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.IntVector_front(self)

    def back(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.IntVector_back(self)

    def assign(self, n, x):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.IntVector_resize(self, *args)

    def insert(self, *args):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.IntVector_insert(self, *args)

    def reserve(self, n):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.IntVector_reserve(self, n)

    def capacity(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.IntVector_capacity(self)
    __swig_destroy__ = _AutoInfer_cpp2python_Ubuntu16_04_7.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _AutoInfer_cpp2python_Ubuntu16_04_7.IntVector_swigregister
IntVector_swigregister(IntVector)

class UInt32Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UInt32Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UInt32Vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.UInt32Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.UInt32Vector___nonzero__(self)

    def __bool__(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.UInt32Vector___bool__(self)

    def __len__(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.UInt32Vector___len__(self)

    def __getslice__(self, i, j):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.UInt32Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.UInt32Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.UInt32Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.UInt32Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.UInt32Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.UInt32Vector___setitem__(self, *args)

    def pop(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.UInt32Vector_pop(self)

    def append(self, x):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.UInt32Vector_append(self, x)

    def empty(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.UInt32Vector_empty(self)

    def size(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.UInt32Vector_size(self)

    def swap(self, v):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.UInt32Vector_swap(self, v)

    def begin(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.UInt32Vector_begin(self)

    def end(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.UInt32Vector_end(self)

    def rbegin(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.UInt32Vector_rbegin(self)

    def rend(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.UInt32Vector_rend(self)

    def clear(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.UInt32Vector_clear(self)

    def get_allocator(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.UInt32Vector_get_allocator(self)

    def pop_back(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.UInt32Vector_pop_back(self)

    def erase(self, *args):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.UInt32Vector_erase(self, *args)

    def __init__(self, *args):
        this = _AutoInfer_cpp2python_Ubuntu16_04_7.new_UInt32Vector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.UInt32Vector_push_back(self, x)

    def front(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.UInt32Vector_front(self)

    def back(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.UInt32Vector_back(self)

    def assign(self, n, x):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.UInt32Vector_assign(self, n, x)

    def resize(self, *args):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.UInt32Vector_resize(self, *args)

    def insert(self, *args):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.UInt32Vector_insert(self, *args)

    def reserve(self, n):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.UInt32Vector_reserve(self, n)

    def capacity(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.UInt32Vector_capacity(self)
    __swig_destroy__ = _AutoInfer_cpp2python_Ubuntu16_04_7.delete_UInt32Vector
    __del__ = lambda self: None
UInt32Vector_swigregister = _AutoInfer_cpp2python_Ubuntu16_04_7.UInt32Vector_swigregister
UInt32Vector_swigregister(UInt32Vector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.StringVector___nonzero__(self)

    def __bool__(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.StringVector___bool__(self)

    def __len__(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.StringVector___setitem__(self, *args)

    def pop(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.StringVector_pop(self)

    def append(self, x):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.StringVector_append(self, x)

    def empty(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.StringVector_empty(self)

    def size(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.StringVector_size(self)

    def swap(self, v):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.StringVector_swap(self, v)

    def begin(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.StringVector_begin(self)

    def end(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.StringVector_end(self)

    def rbegin(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.StringVector_rbegin(self)

    def rend(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.StringVector_rend(self)

    def clear(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.StringVector_clear(self)

    def get_allocator(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.StringVector_get_allocator(self)

    def pop_back(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.StringVector_pop_back(self)

    def erase(self, *args):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _AutoInfer_cpp2python_Ubuntu16_04_7.new_StringVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.StringVector_push_back(self, x)

    def front(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.StringVector_front(self)

    def back(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.StringVector_back(self)

    def assign(self, n, x):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.StringVector_resize(self, *args)

    def insert(self, *args):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.StringVector_insert(self, *args)

    def reserve(self, n):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.StringVector_reserve(self, n)

    def capacity(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.StringVector_capacity(self)
    __swig_destroy__ = _AutoInfer_cpp2python_Ubuntu16_04_7.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _AutoInfer_cpp2python_Ubuntu16_04_7.StringVector_swigregister
StringVector_swigregister(StringVector)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.FloatVector___nonzero__(self)

    def __bool__(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.FloatVector___bool__(self)

    def __len__(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.FloatVector___setitem__(self, *args)

    def pop(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.FloatVector_pop(self)

    def append(self, x):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.FloatVector_append(self, x)

    def empty(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.FloatVector_empty(self)

    def size(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.FloatVector_size(self)

    def swap(self, v):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.FloatVector_swap(self, v)

    def begin(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.FloatVector_begin(self)

    def end(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.FloatVector_end(self)

    def rbegin(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.FloatVector_rbegin(self)

    def rend(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.FloatVector_rend(self)

    def clear(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.FloatVector_clear(self)

    def get_allocator(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.FloatVector_get_allocator(self)

    def pop_back(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.FloatVector_pop_back(self)

    def erase(self, *args):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.FloatVector_erase(self, *args)

    def __init__(self, *args):
        this = _AutoInfer_cpp2python_Ubuntu16_04_7.new_FloatVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.FloatVector_push_back(self, x)

    def front(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.FloatVector_front(self)

    def back(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.FloatVector_back(self)

    def assign(self, n, x):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.FloatVector_reserve(self, n)

    def capacity(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.FloatVector_capacity(self)
    __swig_destroy__ = _AutoInfer_cpp2python_Ubuntu16_04_7.delete_FloatVector
    __del__ = lambda self: None
FloatVector_swigregister = _AutoInfer_cpp2python_Ubuntu16_04_7.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.DoubleVector___bool__(self)

    def __len__(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.DoubleVector_pop(self)

    def append(self, x):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.DoubleVector_append(self, x)

    def empty(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.DoubleVector_empty(self)

    def size(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.DoubleVector_size(self)

    def swap(self, v):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.DoubleVector_swap(self, v)

    def begin(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.DoubleVector_begin(self)

    def end(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.DoubleVector_end(self)

    def rbegin(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.DoubleVector_rbegin(self)

    def rend(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.DoubleVector_rend(self)

    def clear(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.DoubleVector_clear(self)

    def get_allocator(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _AutoInfer_cpp2python_Ubuntu16_04_7.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.DoubleVector_push_back(self, x)

    def front(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.DoubleVector_front(self)

    def back(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.DoubleVector_back(self)

    def assign(self, n, x):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.DoubleVector_reserve(self, n)

    def capacity(self):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.DoubleVector_capacity(self)
    __swig_destroy__ = _AutoInfer_cpp2python_Ubuntu16_04_7.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _AutoInfer_cpp2python_Ubuntu16_04_7.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)


_AutoInfer_cpp2python_Ubuntu16_04_7.input_i1_swigconstant(_AutoInfer_cpp2python_Ubuntu16_04_7)
input_i1 = _AutoInfer_cpp2python_Ubuntu16_04_7.input_i1

_AutoInfer_cpp2python_Ubuntu16_04_7.input_i2_swigconstant(_AutoInfer_cpp2python_Ubuntu16_04_7)
input_i2 = _AutoInfer_cpp2python_Ubuntu16_04_7.input_i2

_AutoInfer_cpp2python_Ubuntu16_04_7.output_o1_swigconstant(_AutoInfer_cpp2python_Ubuntu16_04_7)
output_o1 = _AutoInfer_cpp2python_Ubuntu16_04_7.output_o1

_AutoInfer_cpp2python_Ubuntu16_04_7.output_o2_swigconstant(_AutoInfer_cpp2python_Ubuntu16_04_7)
output_o2 = _AutoInfer_cpp2python_Ubuntu16_04_7.output_o2

_AutoInfer_cpp2python_Ubuntu16_04_7.PRECISION_swigconstant(_AutoInfer_cpp2python_Ubuntu16_04_7)
PRECISION = _AutoInfer_cpp2python_Ubuntu16_04_7.PRECISION

_AutoInfer_cpp2python_Ubuntu16_04_7.MAGIC_EXCLUDE_double_swigconstant(_AutoInfer_cpp2python_Ubuntu16_04_7)
MAGIC_EXCLUDE_double = _AutoInfer_cpp2python_Ubuntu16_04_7.MAGIC_EXCLUDE_double

def actvFunSigmoid(arg1):
    return _AutoInfer_cpp2python_Ubuntu16_04_7.actvFunSigmoid(arg1)
actvFunSigmoid = _AutoInfer_cpp2python_Ubuntu16_04_7.actvFunSigmoid

def actvFunTanH(arg1):
    return _AutoInfer_cpp2python_Ubuntu16_04_7.actvFunTanH(arg1)
actvFunTanH = _AutoInfer_cpp2python_Ubuntu16_04_7.actvFunTanH

def derivativeCalc(funPtr, fun_in):
    return _AutoInfer_cpp2python_Ubuntu16_04_7.derivativeCalc(funPtr, fun_in)
derivativeCalc = _AutoInfer_cpp2python_Ubuntu16_04_7.derivativeCalc

def getActivationFun(funName):
    return _AutoInfer_cpp2python_Ubuntu16_04_7.getActivationFun(funName)
getActivationFun = _AutoInfer_cpp2python_Ubuntu16_04_7.getActivationFun
class Eason(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Eason, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Eason, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _AutoInfer_cpp2python_Ubuntu16_04_7.new_Eason()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _AutoInfer_cpp2python_Ubuntu16_04_7.delete_Eason
    __del__ = lambda self: None
    __swig_setmethods__["input"] = _AutoInfer_cpp2python_Ubuntu16_04_7.Eason_input_set
    __swig_getmethods__["input"] = _AutoInfer_cpp2python_Ubuntu16_04_7.Eason_input_get
    if _newclass:
        input = _swig_property(_AutoInfer_cpp2python_Ubuntu16_04_7.Eason_input_get, _AutoInfer_cpp2python_Ubuntu16_04_7.Eason_input_set)
    __swig_setmethods__["target_output"] = _AutoInfer_cpp2python_Ubuntu16_04_7.Eason_target_output_set
    __swig_getmethods__["target_output"] = _AutoInfer_cpp2python_Ubuntu16_04_7.Eason_target_output_get
    if _newclass:
        target_output = _swig_property(_AutoInfer_cpp2python_Ubuntu16_04_7.Eason_target_output_get, _AutoInfer_cpp2python_Ubuntu16_04_7.Eason_target_output_set)

    def setWeightBias(self, weights_h1n2_in, bias_h1n2_in, weights_end_in, bias_end_in, learning_rate_in):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.Eason_setWeightBias(self, weights_h1n2_in, bias_h1n2_in, weights_end_in, bias_end_in, learning_rate_in)

    def setInput_TargetOutput(self, input, target_output):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.Eason_setInput_TargetOutput(self, input, target_output)

    def train(self, turns=20, logOut=True, autoTrain=False, mse_threshold=0.0):
        return _AutoInfer_cpp2python_Ubuntu16_04_7.Eason_train(self, turns, logOut, autoTrain, mse_threshold)
Eason_swigregister = _AutoInfer_cpp2python_Ubuntu16_04_7.Eason_swigregister
Eason_swigregister(Eason)

# This file is compatible with both classic and new-style classes.


